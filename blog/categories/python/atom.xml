<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="http://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://treyhunner.com/"/>
  <updated>2018-06-21T15:02:10-07:00</updated>
  <id>http://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to make an iterator in Python]]></title>
    <link href="http://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/"/>
    <updated>2018-06-21T16:00:00-07:00</updated>
    <id>http://treyhunner.com/2018/06/how-to-make-an-iterator-in-python</id>
    <content type="html"><![CDATA[<p>I wrote an article sometime ago on <a href="http://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">the iterator protocol that powers Python&rsquo;s <code>for</code> loops</a>.
One thing I left out of that article was <strong>how to make your own iterators</strong>.</p>

<p>In this article I&rsquo;m going to discuss why you&rsquo;d want to make your own iterators and then show you how to do so.</p>

<h2>What is an iterator?</h2>

<p>First let&rsquo;s quickly address what an iterator is.
For a much more detailed explanation, consider watching my <a href="https://www.youtube.com/watch?v=V2PkkMS2Ack">Loop Better talk</a> or reading <a href="https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python">the article based on the talk</a>.</p>

<p>An <strong>iter<em>able</em></strong> is anything you&rsquo;re able to loop over.</p>

<p>An <strong>iter<em>ator</em></strong> is the object that does the actual iterating.</p>

<p>You can get an iterator from any iterable by calling the built-in <code>iter</code> function on the iterable.</p>

<pre><code class="python">&gt;&gt;&gt; favorite_numbers = [6, 57, 4, 7, 68, 95]
&gt;&gt;&gt; iter(favorite_numbers)
&lt;list_iterator object at 0x7fe8e5623160&gt;
</code></pre>

<p>You can use the built-in <code>next</code> function on an iterator to get the next item from it (you&rsquo;ll get a <code>StopIteration</code> exception if there are no more items).</p>

<pre><code class="python">&gt;&gt;&gt; favorite_numbers = [6, 57, 4, 7, 68, 95]
&gt;&gt;&gt; my_iterator = iter(favorite_numbers)
&gt;&gt;&gt; next(my_iterator)
6
&gt;&gt;&gt; next(my_iterator)
57
</code></pre>

<p>There&rsquo;s one more rule about iterators that makes everything interesting: <strong>iterators are also iterables</strong> and their iterator is themselves.
I explain the consequences of that more fully in that <a href="https://www.youtube.com/watch?v=V2PkkMS2Ack">Loop Better talk</a> I mentioned above.</p>

<h2>Why make an iterator?</h2>

<p>Iterators allow you to make an iterable that computes its items as it goes.
Which means that you can make iterables that are <strong>lazy</strong>, in that they don&rsquo;t determine what their next item is until you ask them for it.</p>

<p>Using an iterator instead of a list, set, or another iterable data structure can sometimes allow us to save memory.
For example, we can use <code>itertools.repeat</code> to create an iterable that provides 100 million <code>4</code>&rsquo;s to us:</p>

<pre><code class="python">&gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; lots_of_fours = repeat(4, times=100_000_000)
</code></pre>

<p>This iterator takes up 56 bytes of memory on my machine:</p>

<pre><code class="python">&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(lots_of_fours)
56
</code></pre>

<p>An equivalent list of 100 million <code>4</code>&rsquo;s takes up many megabytes of memory:</p>

<pre><code class="python">&gt;&gt;&gt; lots_of_fours = [4] * 100_000_000
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(lots_of_fours)
800000064
</code></pre>

<p>While iterators can save memory, they can also save time.
For example if you wanted to print out just the first line of a 10 gigabyte log file, you could do this:</p>

<pre><code class="python">&gt;&gt;&gt; print(next(open('giant_log_file.txt')))
This is the first line in a giant file
</code></pre>

<p>File objects in Python are implemented iterators.
As you loop over a file, data is read into memory one line at a time.
If we instead used the <code>readlines</code> method to store all lines in memory, we might run out of system memory.</p>

<p>So <strong>iterators can save us memory</strong>, but <strong>iterators can sometimes save us time</strong> also.</p>

<p>Additionally, <strong>iterators have abilities that other iterables don&rsquo;t</strong>.
For example, the laziness of iterables can be used to make iterables that have an unknown length.
In fact, you can even make infinitely long iterators.</p>

<p>For example, the <code>itertools.count</code> utility will give us an iterator that will provide every number from <code>0</code> upward as we loop over it:</p>

<pre><code class="python">&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; for n in count():
...     print(n)
...
0
1
2
(this goes on forever)
</code></pre>

<p>That <code>itertools.count</code> object is essentially an infinitely long iterable.
And it&rsquo;s implemented as an iterator.</p>

<h2>Making an iterator: the object-oriented way</h2>

<p>So we&rsquo;ve seen that iterators can save us memory, save us CPU time, and unlock new abilities to us.</p>

<p>Let&rsquo;s make our own iterators.
We&rsquo;ll start be re-inventing the <code>itertools.count</code> iterator object.</p>

<p>Here&rsquo;s an iterator implemented using a class:</p>

<pre><code class="python">class Count:

    """Iterator that counts upward forever."""

    def __init__(self, start=0):
        self.num = start

    def __iter__(self):
        return self

    def __next__(self):
        num = self.num
        self.num += 1
        return num
</code></pre>

<p>This class has an initializer that initializes our current number to <code>0</code> (or whatever is passed in as the <code>start</code>).
The things that make this class usable as an iterator are the <code>__iter__</code> and <code>__next__</code> methods.</p>

<p>When an object is passed to the <code>str</code> built-in function, its <code>__str__</code> method is called.
When an object is passed to the <code>len</code> built-in function, its <code>__len__</code> method is called.</p>

<pre><code class="python">&gt;&gt;&gt; numbers = [1, 2, 3]
&gt;&gt;&gt; str(numbers), numbers.__str__()
('[1, 2, 3]', '[1, 2, 3]')
&gt;&gt;&gt; len(numbers), numbers.__len__()
(3, 3)
</code></pre>

<p>Calling the built-in <code>iter</code> function on an object will attempt to call its <code>__iter__</code> method.
Calling the built-in <code>next</code> function on an object will attempt to call its <code>__next__</code> method.</p>

<p>The <code>iter</code> function is supposed to return an iterator.
So our <code>__iter__</code> function must return an iterator.
But <strong>our object is an iterator</strong>, so should return ourself.
Therefore our <code>Count</code> object returns <code>self</code> from its <code>__iter__</code> method because it is <em>its own iterator</em>.</p>

<p>The <code>next</code> function is supposed to return the next item in our iterator or raise a <code>StopIteration</code> exception when there are no more items.
We&rsquo;re returning the current number and incrementing the number so it&rsquo;ll be larger during the next <code>__next__</code> call.</p>

<p>We can manually loop over our <code>Count</code> iterator class like this:</p>

<pre><code class="python">&gt;&gt;&gt; c = Count()
&gt;&gt;&gt; next(c)
0
&gt;&gt;&gt; next(c)
1
</code></pre>

<p>We could also loop over our <code>Count</code> object like using a <code>for</code> loop, as with any other iterable:</p>

<pre><code class="python">&gt;&gt;&gt; for n in Count():
...     print(n)
...
0
1
2
(this goes on forever)
</code></pre>

<p>This object-oriented approach to making an iterator is cool, but it&rsquo;s not the usual way that Python programmers make iterators.
Usually when we want an iterator, we make a generator.</p>

<h2>Generators: the easy way to make an iterator</h2>

<p>The easiest ways to make our own iterators in Python is to create a generator.</p>

<p>There are two ways to make generators in Python.</p>

<p>Given this list of numbers:</p>

<pre><code class="python">&gt;&gt;&gt; favorite_numbers = [6, 57, 4, 7, 68, 95]
</code></pre>

<p>We can make a generator that will lazily provide us with all the squares of these numbers like this:</p>

<pre><code class="python">&gt;&gt;&gt; def square_all(numbers):
...     for n in numbers:
...         yield n**2
...
&gt;&gt;&gt; squares = square_all(favorite_numbers)
</code></pre>

<p>Or we can make the same generator like this:</p>

<pre><code class="python">&gt;&gt;&gt; squares = (n**2 for n in favorite_numbers)
</code></pre>

<p>The first one is called a <strong>generator function</strong> and the second one is called a <strong>generator expression</strong>.</p>

<p>Both of these generator objects work the same way.
They both have a type of <code>generator</code> and they&rsquo;re both iterators that provide squares of the numbers in our numbers list.</p>

<pre><code class="python">&gt;&gt;&gt; type(squares)
&lt;class 'generator'&gt;
&gt;&gt;&gt; next(squares)
36
&gt;&gt;&gt; next(squares)
3249
</code></pre>

<p>We&rsquo;re going to talk about both of these approaches to making a generator, but first let&rsquo;s talk about terminology.</p>

<p>The word &ldquo;generator&rdquo; is used in quite a few ways in Python:</p>

<ul>
<li>A <strong>generator</strong>, also called a <strong>generator object</strong>, is an iterator whose type is <code>generator</code></li>
<li>A <strong>generator function</strong> is a special syntax that allows us to make a function which returns a <strong>generator object</strong> when we call it</li>
<li>A <strong>generator expression</strong> is a comprehension-like syntax that allows you to create a <strong>generator object</strong> inline</li>
</ul>


<p>With that terminology out of the way, let&rsquo;s take a look at each one of these things individually.
We&rsquo;ll look at generator functions first.</p>

<h2>Generator functions</h2>

<p>Generator functions are distinguished from plain old functions by the fact that they have one or more <code>yield</code> statements.</p>

<p>Normally when you call a function, its code is executed:</p>

<pre><code class="python">&gt;&gt;&gt; def gimme4_please():
...     print("Let me go get that number for you.")
...     return 4
...
&gt;&gt;&gt; num = gimme4_please()
Let me go get that number for you.
&gt;&gt;&gt; num
4
</code></pre>

<p>But if the function has a <code>yield</code> statement in it, it isn&rsquo;t a typical function anymore.
It&rsquo;s now a <strong>generator function</strong>, meaning it will return a <strong>generator object</strong> when called.
That generator object can be looped over to execute it until a <code>yield</code> statement is hit:</p>

<pre><code class="python">&gt;&gt;&gt; def gimme4_later_please():
...     print("Let me go get that number for you.")
...     yield 4
...
&gt;&gt;&gt; get4 = gimme4_later_please()
&gt;&gt;&gt; get4
&lt;generator object gimme4_later_please at 0x7f78b2e7e2b0&gt;
&gt;&gt;&gt; num = next(get4)
Let me go get that number for you.
&gt;&gt;&gt; num
4
</code></pre>

<p>The mere presence of a <code>yield</code> statement turns a function into a generator function.
If you see a function and there&rsquo;s a <code>yield</code>, you&rsquo;re working with a different animal.
It&rsquo;s a bit odd, but that&rsquo;s the way generator functions work.</p>

<p>Okay let&rsquo;s look at a real example of a generator function.
We&rsquo;ll make a generator function that does the same thing as our <code>Count</code> iterator class we made earlier.</p>

<pre><code class="python">def count(start=0):
    num = start
    while True:
        yield num
        num += 1
</code></pre>

<p>Just like our <code>Counter</code> iterator class, we can manually loop over the generator we get back from calling <code>count</code>:</p>

<pre><code class="python">&gt;&gt;&gt; c = count()
&gt;&gt;&gt; next(c)
0
&gt;&gt;&gt; next(c)
1
</code></pre>

<p>And we can loop over this generator object using a <code>for</code> loop, just like before:</p>

<pre><code class="python">&gt;&gt;&gt; for n in count():
...     print(n)
...
0
1
2
(this goes on forever)
</code></pre>

<p>But this function is considerably shorter than our <code>Count</code> class we created before.</p>

<h2>Generator expressions</h2>

<p>Generator expressions are a list comprehension-like syntax that allow us to make a generator object.</p>

<p>Let&rsquo;s say we have a list comprehension that filters empty lines from a file and strips newlines from the end:</p>

<pre><code class="python">lines = [
    line.rstrip('\n')
    for line in poem_file
    if line != '\n'
]
</code></pre>

<p>We could create a generator instead of a list, by turning the square brackets of that comprehension into parenthesis:</p>

<pre><code class="python">lines = (
    line.rstrip('\n')
    for line in poem_file
    if line != '\n'
)
</code></pre>

<p>Just as our list comprehension gave us a list back, our <strong>generator expression</strong> gives us a <strong>generator object</strong> back:</p>

<pre><code class="python">&gt;&gt;&gt; type(lines)
&lt;class 'generator'&gt;
&gt;&gt;&gt; next(lines)
' This little bag I hope will prove'
&gt;&gt;&gt; next(lines)
'To be not vainly made--'
</code></pre>

<p>Generator expressions use a shorter inline syntax compared to generator functions.
They&rsquo;re not as powerful though.</p>

<p>If you can write your generator function in this form:</p>

<pre><code class="python">def get_a_generator(some_iterable):
    for item in some_iterable:
        if some_condition(item):
            yield item
</code></pre>

<p>Then you can replace it with a generator expression:</p>

<pre><code class="python">def get_a_generator(some_iterable):
    return (
        item
        for item in some_iterable
        if some_condition(item)
    )
</code></pre>

<p>If you can&rsquo;t write your generator function in that form, then you can&rsquo;t create a generator expression to replace it.</p>

<h2>Generator expressions vs generator functions</h2>

<p>You can think of generator expressions as the list comprehensions of the generator world.</p>

<p>If you&rsquo;re not familiar with list comprehensions, I recommend reading my article on <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">list comprehensions in Python</a>.
I note in that article that you can copy-paste your way from a <code>for</code> loop to a list comprehension.</p>

<p>You can also copy-paste your way from a generator function to a function that returns a generator expression:</p>

<p><img src="/images/generator-expression-copy-paste.gif"></p>

<p>Generator expressions are to generator functions as list comprehensions are to a simple <code>for</code> loop with an append and a condition.</p>

<p>Generator expressions are so similar to comprehensions, that you might even be tempted to say <strong>generator comprehension</strong> instead of generator expression.
That&rsquo;s not technically the correct name, but if you say it everyone will know what you&rsquo;re talking about.
Ned Batchelder actually proposed that we should all <a href="https://nedbatchelder.com/blog/201605/generator_comprehensions.html">start calling generator expressions generator comprehensions</a> and I tend to agree that this would be a clearer name.</p>

<h2>So what&rsquo;s the best way to make an iterator?</h2>

<p>To make an iterator you could create an iterator class, a generator function, or a generator expression.
Which way is the best way though?</p>

<p>Generator expressions are <strong>very succinct</strong>, but they&rsquo;re <strong>not nearly as flexible</strong> as generator functions.
Generator functions are flexible, but if you need to <strong>attach extra methods or attributes</strong> to your iterator object, you&rsquo;ll probably need to switch to using an iterator class.</p>

<p>I&rsquo;d recommend reaching for generator expressions the same way you reach for list comprehensions.
If you&rsquo;re doing a simple <strong>mapping or filtering operation</strong>, a <strong>generator expression</strong> is a great solution.
If you&rsquo;re doing something <strong>a bit more sophisticated</strong>, you&rsquo;ll likely need a <strong>generator function</strong>.</p>

<p>I&rsquo;d recommend using generator functions the same way you&rsquo;d use <code>for</code> loops that append to a list.
Everywhere you&rsquo;d see an <code>append</code> method, you&rsquo;d often see a <code>yield</code> statement instead.</p>

<p>And I&rsquo;d say that you should <strong>almost never create an iterator class</strong>.
If you find you need an iterator class, try to write a generator function that does what you need and see how it compares to your iterator class.</p>

<h2>Generators can help when making iterables too</h2>

<p>You&rsquo;ll see iterator classes in the wild, but there&rsquo;s rarely a good opportunity to write your own.</p>

<p>While it&rsquo;s rare to create your own iterator class, it&rsquo;s not unusual to make your own iterable class.
And iterable classes require a <code>__iter__</code> method which returns an iterator.
Since generators are the easy way to make an iterator, we can use a generator function or a generator expression to create our <code>__iter__</code> methods.</p>

<p>For example here&rsquo;s an iterable that provides x-y coordinates:</p>

<pre><code class="python">class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y
    def __iter__(self):
        yield self.x
        yield self.y
</code></pre>

<p>Note that our <code>Point</code> class here creates an <strong>iterable</strong> when called (not an iterator).
That means our <code>__iter__</code> method must return an iterator.
The easiest way to create an iterator is by making a generator function, so that&rsquo;s just what we did.</p>

<p>We stuck <code>yield</code> in our <code>__iter__</code> to make it into a generator function and now our <code>Point</code> class con be looped over, just like any other iterable.</p>

<pre><code class="python">&gt;&gt;&gt; p = Point(1, 2)
&gt;&gt;&gt; x, y = p
&gt;&gt;&gt; print(x, y)
1 2
&gt;&gt;&gt; list(p)
[1, 2]
</code></pre>

<p>Generator functions are a natural fit for creating <code>__iter__</code> methods on your iterable classes.</p>

<h2>Generators are <em>the</em> way to make iterators</h2>

<p>Dictionaries are the typical way to make a mapping in Python.
Functions are the typical way to make a callable object in Python.
Likewise, <strong>generators are the typical way to make an iterator in Python</strong>.</p>

<p>So when you&rsquo;re thinking &ldquo;it sure would be nice to implement an iterable that lazily computes things as it&rsquo;s looped over,&rdquo; think of iterators.</p>

<p>And when you&rsquo;re considering <strong>how to create your own iterator</strong>, think of <strong>generator functions</strong> and <strong>generator expressions</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to have a great first PyCon]]></title>
    <link href="http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/"/>
    <updated>2018-04-30T08:00:00-07:00</updated>
    <id>http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve decided to invest energy, money, and time away from your home so that you can go to your first PyCon.
Now you want to make sure you spend your time wisely by attending events relevant to you and possibly by forming relations with other PyCon attendees.
But you&rsquo;re (naturally) not an expert conference-goer.
How do you do this?
How do you make the most of your first PyCon?</p>

<p>I&rsquo;m an introvert by nature, but I have increased my ability to socialize with others over the years through practice, gamification of social situations, and learning my limits.</p>

<p>Over the last few years, I&rsquo;ve interviewed many PyCon attendees on <a href="http://weeklypython.chat">Weekly Python Chat</a> and I&rsquo;ve spoken with many first-time PyCon-goers about making the most of PyCon.
It&rsquo;s difficult to describe what PyCon is like to first-time attendees and it&rsquo;s even more difficult to identify how any one person should spend their time at PyCon.
So I&rsquo;m writing this article to compile some of the advice I&rsquo;ve heard from others and to address some of the common fears I hear among first-time PyCon attendees.
Not all of the suggestions below will be right for you, so try to take the advice that works well for you.</p>

<p>Before you read any further, I have to link you to the <a href="https://us.pycon.org/2018/events/newcomer_orientation/">Newcomer Orientation</a>.
This is a new event hosted by Adrienne Lowe this year.
If this is your first PyCon, I&rsquo;d definitely recommend showing up early to the newcomer orientation and get your footing before the big event starts.</p>

<h3>Spending your time: which talks should I go to? 🤔</h3>

<p>The talks at PyCon are typically <strong>uploaded to YouTube within 24 hours after the talk ends</strong>.
That means that you can spend your evening watching the talks you missed the day before or you can watch the talks when you go home.
I&rsquo;m not suggesting you shouldn&rsquo;t watch talks at PyCon.
I am suggesting that <strong>you don&rsquo;t need to worry about attending every talk</strong>.</p>

<p>So how should I decide which talks to go to?
I&rsquo;ve chatted with folks who purposely go exclusively to talks on topics they&rsquo;re not normally interested in.
I also know people who <strong>love going to the keynotes and the lightning talks</strong> but hang out in the hallway (I&rsquo;ll talk about the hallway track later) or attend open spaces the rest of the time.
I&rsquo;m personally one of those people who <strong>attends very few talks</strong> and spends a lot of time in open spaces and the in hallway.</p>

<p><strong>You cannot and will not do everything there is to do at PyCon</strong>.</p>

<p>I suggest embracing this idea by chatting with others about things you&rsquo;ve missed out on.
<strong>People often enjoy reflecting on a talk they just watched</strong> the same way you might want to reflect on a movie.
If you meet someone who just came out of a talk you missed, ask them what it was like and what they learned from it.
They might say &ldquo;eh, it wasn&rsquo;t for me&rdquo; or they might ramble about how exciting it was.</p>

<p>Consider these things before walking into a talk:</p>

<ul>
<li>Would it be nice to show up to this talk a few minutes early and focus my attention on it?</li>
<li>Do I want to possibly ask the speaker a question during Q&amp;A?  (tips for Q&amp;A <a href="https://kev.inburke.com/kevin/how-not-to-ask-questions-at-conference/">here</a> and <a href="https://networkingnerd.net/2016/11/09/how-to-ask-a-question-at-a-conference/">here</a>)</li>
<li>Am I having a conversation that I&rsquo;d really like to continue instead of attending this talk?</li>
<li>Should I take a personal break during this time instead?</li>
</ul>


<p>Remember that PyCon is less about the talks than the discussions that happen around them.
Talks are a wonderful tool to start discussions, but they&rsquo;re not the only way to spark conversation.</p>

<h3>Open spaces: attend them and consider hosting your own! 👐</h3>

<p><a href="https://us.pycon.org/2018/events/open-spaces/">Open spaces</a> are <strong>community-run mini meetup events and they aren&rsquo;t decided before PyCon starts</strong>.
The way it works is that someone puts an index card on the open spaces board to indicate that they&rsquo;re holding an event at a particular time in one of the open spaces rooms that day.
Then others check the open spaces board throughout the day and attend ones they&rsquo;re interested in.</p>

<p>During every talk at PyCon there are at least 4 other talks happening.
There are also 9 open spaces rooms though.
So you&rsquo;re missing out on over 90% of PyCon at any time!</p>

<p>When choosing between an open space and a talk, I usually choose the open space.</p>

<p>There are a few reasons I often pick open spaces over talks:</p>

<ol>
<li>Often the <strong>open spaces are more niche and topical than the talks</strong>: there are some subjects that exist in open spaces every year but which I&rsquo;ve never seen a talk on</li>
<li><strong>Open spaces are all about interaction and discussion</strong> whereas talks are a monologue that often evolves into subsequent dialogues</li>
<li><strong>Open spaces aren&rsquo;t recorded whereas the talks are</strong>, meaning you can&rsquo;t really catch up on them later</li>
</ol>


<p>If you&rsquo;re looking for kinship and conversation, the open spaces a great place to look.</p>

<p>If you&rsquo;re hoping to <em>start</em> a discussion, I&rsquo;d also recommend <a href="https://pycon.blogspot.com/2018/04/keep-eye-out-for-open-space-events-at.html">creating your own open space</a> during PyCon.
The PyCon blog will be publishing a post on open spaces soon which I co-authored.</p>

<p>Disclaimed after the fact: I&rsquo;m one of the volunteer open spaces co-chairs, so I&rsquo;m biased in my love for them.</p>

<h3>Feeling like an imposter or an outsider 🌪</h3>

<p>A common fear when attending PyCon is that people will judge you because you aren&rsquo;t as skilled as they are.</p>

<p>Maybe you&rsquo;re new to Python and you&rsquo;re worried your peers won&rsquo;t accept you because you think you might be years-off from matching their skills.
Maybe you&rsquo;re &ldquo;not a developer&rdquo; and you&rsquo;re afraid you&rsquo;ll feel like an imposter at PyCon.</p>

<p>Not feeling like you&rsquo;ll be smart enough or skilled enough to understand the talks and conversations you&rsquo;ll be in is a big and intimidating thought.
If you&rsquo;re afraid of folks misjudging your expertise, it may help to plan out a few techniques for presenting yourself in a way that makes you feel comfortable.</p>

<p>You might rehearse a few different very <strong>brief elevator pitches</strong>.
Here are some examples:</p>

<ul>
<li>I&rsquo;m a JavaScript developer here to meet folks in the Python world</li>
<li>I&rsquo;m a new programmer and I&rsquo;m here because I&rsquo;ve been told the Python community was pretty welcoming to newcomers</li>
<li>I don&rsquo;t consider myself a developer, but I do write Python code at work to automate things and I&rsquo;m here to learn more</li>
<li>I don&rsquo;t write code for work, but I have some side projects that I&rsquo;m using Python for.  So I&rsquo;m here to learn and meet friendly people.</li>
</ul>


<p>Remember that <strong>you do not need to justify your presence at PyCon</strong>.
If you believe you belong at PyCon, then you do.</p>

<p>If you&rsquo;re interested in the conversation you&rsquo;re in, others may mirror that interest.
If you&rsquo;re enthusiastic about learning new things, others you meet may mirror that enthusiasm.
I&rsquo;ve witnessed quite a few conversations at PyCon that included phrases like &ldquo;oh you don&rsquo;t know about X?  Cool, essentially it&rsquo;s&hellip;&rdquo;
You&rsquo;ll hopefully find that many of the more long-time PyCon attendees go out of their way to welcome beginners.
This is not a universal phenomenon and even folks with good intentions can alienate those around them.</p>

<h3>Tips for starting conversation 💬</h3>

<p>Make sure to treat each person you meet as new.
<strong>Not everyone you meet will be at the conference for the same reasons as you are</strong>.
Some people write code but don&rsquo;t know Python, some people only using a little bit of Python and don&rsquo;t consider themselves developers, some people don&rsquo;t work in tech, and some people don&rsquo;t write code for work at all and may be considering whether they should make a career transition into tech.
Just as you don&rsquo;t need to justify your presence at PyCon to anyone, no one needs to justify their presence to you.</p>

<p>I mentioned above that you might want to make an elevator pitch or two for yourself.
You might also want to consider how you&rsquo;ll respond to some of the questions that will come up frequently, like &ldquo;what do you do?&rdquo; or &ldquo;where do you work?&rdquo;.
You will be asked some of the same questions over and over when meeting new people.
<strong>Knowing how you&rsquo;ll respond to common questions will help put your mind at ease when meeting new people</strong>.</p>

<p>I also recommend occasionally considering what questions you ask, why you&rsquo;re asking them, and the phrasing you use.
Also notice how others ask questions and consider what questions and phrases seem to put others at ease and lead to interesting conversations.
Conversations often go pretty well if you <strong>ask questions that make others feel comfortable and appreciated</strong>.</p>

<h3>Tips for breakfast and lunch time 🍽</h3>

<p>How do lunch and breakfast work?
Can I just sit with anyone or should I choose an empty table?
Are people going to be nice to me?
Do I need to introduce myself when I sit down?</p>

<p>Meal dynamics are interesting because there&rsquo;s not really a rule book for these social dynamics.
Below is what I&rsquo;ve observed over the years.</p>

<p><strong>At lunch and breakfast, you can sit anywhere</strong>.
Often people will ask &ldquo;is this seat taken&rdquo; when sitting down just in case a group of acquaintances are waiting on another person to join them.
Sometimes when a new person joins your table, a particularly friendly person at the table (if one exists) will introduce themselves to make that newcomer feel welcome.
Often this entails a name, a smile, and a wave or a nod.
Beyond these typical social norms, everything else can differ based on the folks sitting at your table (that includes you!).</p>

<p>Sometimes a couple people at a table will be very interested to know what brings everyone to the conference and what each person &ldquo;does&rdquo;.
<strong>Meals are a good time to test out your elevator pitch</strong> when introducing yourself to see how the conversation goes and to verify that it makes you feel comfortable.</p>

<p>Sometimes people will be more interested in either sitting quietly or talking to a particular person or two with whom they&rsquo;ve found something interesting to discuss.
Personally I often find myself asking others where they&rsquo;re traveling from, whether it&rsquo;s their first year attending, what they&rsquo;ve thought of the conference so far, and <strong>what inspired them to come to PyCon</strong>.
I tend to leave questions about employment and jobs for later because folks will often bring up their work (if they want to) on their own.</p>

<h3>The hallway track 👣</h3>

<p>Something you might consider doing while at PyCon is <strong>taking breaks in the hallway</strong>.
Sit at a table in the open and if someone asks whether they can sit at your table say something inviting/friendly like &ldquo;sure! I&rsquo;m YOUR_NAME. Nice to meet you new friend!&rdquo; (or just smile and gesture in a friendly way if you&rsquo;re not feeling adventurous in the moment).
Chatting with folks in the hallway in an unstructured way is often referred to as the <a href="http://www.ericmjl.com/blog/2016/6/3/the-pycon-ers-guide-to-the-hallway-track/">hallway track</a>.</p>

<p>In addition to joining or starting a table in the hallway, consider identifying groups that have <a href="http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/">a PacMan opening</a> to join and make sure the groups you&rsquo;re in are PacMan-friendly.</p>

<p>While chatting with new friends, giving one person your full attention in a 5 minute conversation is often more rewarding and memorable than having five 1 minute conversations with different people.
But do keep in mind though that <strong>if you&rsquo;re no longer interested in a conversation or activity, you don&rsquo;t need to keep it going</strong>.
There are lots of things going on at any one time at PyCon and lots of people there.
It&rsquo;s not unusual to say &ldquo;nice talking to you&rdquo; and leave one conversation to walk off to another conversation or to something else entirely.</p>

<h3>Don&rsquo;t just follow the rules: be compassionate 💖</h3>

<p>You&rsquo;re at a professional event.
You should absolutely try to have fun and derive as much value as you can from PyCon, but you always want to make sure you feel welcome, comfortable, and safe.
Importantly, you should also be mindful to make sure those around you feel the same way.
Please <strong>be cognizant of the preferences of those around you and be respectful of their needs</strong>.</p>

<p>PyCon has a <a href="https://us.pycon.org/2018/about/code-of-conduct/">code of conduct</a>.
Read it.
I expect you to go beyond embracing the law of the code of conduct.
I&rsquo;d like you to embrace the spirit of the code of conduct as well.</p>

<p>When meeting people in general, <strong>make sure to be nice</strong>.
Don&rsquo;t talk down to people, don&rsquo;t insult people, and don&rsquo;t treat anyone like they don&rsquo;t belong or aren&rsquo;t worthy.
<strong>The Python community prides itself on being nice</strong> and we expect you to be nice as well.
Be kind, be compassionate, be considerate.</p>

<p>On that note, you may run into folks who act unkind or make you feel unwelcome at some point.
It&rsquo;s okay to cut and run at any point during any conversation or event.
If you don&rsquo;t feel welcome, I recommend <strong>removing yourself from the space you&rsquo;re in and contacting one of the staff members</strong> listed on <a href="https://us.pycon.org/2018/about/code-of-conduct/">the code of conduct page</a>.
Even if you just want to say &ldquo;hey something happened that could maybe be avoided in the future,&rdquo; it would be wonderful if you could muster the courage to contact a staff member.
<strong>PyCon tries to improve every year and feedback is the way that happens</strong>.</p>

<h3>Interacting online during PyCon 🐦</h3>

<p>After PyCon is over, some people occasionally follow-up with folks they met over email.
Sometimes people will add each other on LinkedIn or Facebook also.
But the means of interaction I&rsquo;ve noticed most is Twitter.
I&rsquo;m unlikely to send most of the people I meet at PyCon an email, but I try to add most of the people I meet to my <a href="https://twitter.com/treyhunner/lists/pycon-2017/members">PyCon list</a> on Twitter.</p>

<p>If you&rsquo;re not completely opposed to it, <strong>I recommend getting a Twitter account to make it easier to passively keep up with folks from PyCon after the conference ends</strong>.
You don&rsquo;t have to use Twitter all the time to get value from it, you could just use it as a modern day <a href="https://en.wikipedia.org/wiki/Rolodex">rolodex</a> of sorts.
Twitter isn&rsquo;t the only way people stay in touch, but it&rsquo;s an extremely easy passive way to stay in touch.</p>

<p>If you do get a Twitter account, I recommend adding a saved search for &ldquo;pycon2018 OR pycon&rdquo; to your Twitter app or to <a href="https://tweetdeck.twitter.com">TweetDeck</a> (if you use it) to <strong>follow a bit of the random PyCon-related Twitter chatter during the conference</strong> and to like/reply/interact with others online.</p>

<p>Sometimes <strong>people on Twitter will ask if anyone would like to join them for dinner</strong> and you might decide to reply and say you&rsquo;d like to join.
Sometimes you&rsquo;ll recognize the face or name of someone you met over breakfast or someone you recognize from another part of the internet.
If you&rsquo;re feeling comfortable with it, you could send a tweet to that person to ask if they&rsquo;d like to meet up and chat during one of the breaks.</p>

<p>However, I keep in mind when you meet people that people are just people.
If you think someone is famous or important or smart, don&rsquo;t treat them like they&rsquo;re a celebrity or like they&rsquo;re superior to you.
<strong>It&rsquo;s wonderful to show appreciation for what someone does</strong>.
But keep in mind that <strong>most people feel awkward when they feel like they&rsquo;re being put on a pedestal</strong>.
Treat folks you meet as your equals.</p>

<h3>Networking isn&rsquo;t a dirty word: it means making friends 👥</h3>

<p>I hear two opposing concerns sometimes expressed about PyCon:</p>

<ol>
<li>Isn&rsquo;t everyone here to get a job or hire people?</li>
<li>Is it acceptable to go to PyCon looking for a job?</li>
</ol>


<p>PyCon is a networking event.
That doesn&rsquo;t necessarily mean everyone is there to get a job, but it also definitely doesn&rsquo;t mean it&rsquo;s unacceptable to job-seek at Python.</p>

<p>There is <strong>no shame in going to PyCon with the goal of getting a new job</strong>.
Many of the sponsors in the Expo hall are looking to hire new developers and events like the job fair are specifically designed to bring together folks seeking work and folks seeking workers.
But <strong>if you are not at PyCon to get a job or to hire someone else, that&rsquo;s absolutely okay also</strong>!</p>

<p>The focus of PyCon is on <strong>meeting people and sharing experiences</strong> and that can come in a <em>lot</em> of different forms.
Sometimes the people you meet will end up being your coworkers one day, sometimes they&rsquo;re folks you&rsquo;d like to keep in touch with, and sometimes they&rsquo;re just a friendly unnamed Pythonistas you once had a good conversation with.</p>

<p>PyCon is a networking event and networking isn&rsquo;t a dirty word.
<strong>Networking means meeting new people</strong>.
I&rsquo;ve met a <em>lot</em> of people at PyCon who I care deeply about.
Some of them I haven&rsquo;t seen in years and only keep in touch with sporadically through social media, some I see once or twice each year, and some I chat with on a weekly basis online.</p>

<p>Speaking of networking, there&rsquo;s a <a href="https://us.pycon.org/2018/events/speed_networking/">Speed Networking</a> event during the opening reception at PyCon this year that I&rsquo;d recommend going to.</p>

<p>Whatever your goals are at PyCon, try <strong>savor the experiences you have</strong> while there.</p>

<h3>Be prepared to keep in touch 📇</h3>

<p>How am I supposed to remember all these amazing people I met!
Should I bring business cards and if so how many?
How should I follow up with people after the conference?</p>

<p>If you have a good conversation with someone, I&rsquo;d recommend exchanging information with them.
I&rsquo;ve seen people <strong>write email addresses on napkins</strong>.
I&rsquo;ve also frequently seen people exchange business cards or name cards.
Sometimes people simply <strong>write down Twitter handles</strong> or even ask to take a picture of a face and a badge.
As I noted above, I like to get people&rsquo;s Twitter handles and add them to a <a href="https://twitter.com/treyhunner/lists/pycon-2017/members">PyCon list</a> I maintain for myself.
I also exchange business cards and other forms of contact information.</p>

<p>Being handed a business card doesn&rsquo;t mean &ldquo;this is a business interaction and we are fancy business people&rdquo;.
If someone hands you a business card, it usually means they appreciated the conversation they had with you and they&rsquo;d like to keep in touch (or at least allow for that possibility).
Sometimes it means they want to hire you, but often they simply want a way to remember your name so they can find you on social media or send you an email later.</p>

<p>The tricky part is remembering to stay in touch when you go home and remembering which people you had which conversations with.
It&rsquo;s not unusual for people to <strong>take notes on business cards about what they talked about with you and why</strong>.
I think this is a great strategy for remembering who you&rsquo;re most interested in sending a kind note to after you go home and I wish I remembered to do this more often.</p>

<p>This blog post on <a href="http://swombat.com/2011/2/25/kevin-mcdonagh-how-to-attend-a-conference">how to attend a conference</a> has recommendations for staying in touch (as well as many other recommendations).</p>

<h3>Evening events: dinners and board games 🃏</h3>

<p>What do people do for dinner?
How do they organize?
How late do they stay?
Is there dinner at the conference center, if you don&rsquo;t want to go out?
How do I find people to go to dinner with if I don&rsquo;t know anyone?
Also I know that there are some informal get-togethers at the conference.
How do I propose them?
How do I know what&rsquo;s there?</p>

<p>One trick that I&rsquo;ve used and I&rsquo;ve seen others use: <strong>make a game of inviting people you don&rsquo;t really know well to dinner</strong>.
If you&rsquo;re nervous about being with lots of new people, <strong>find a couple familiar people and ask each to invite just 1 person</strong>.
If you&rsquo;d like to do dinner in a very small group, post on Twitter and say: &ldquo;I&rsquo;m looking for a small dinner group and I&rsquo;m looking for exactly 1 or 2 or 3 (your choice) other people to do dinner with.  Any takers?&rdquo;.</p>

<p>Sometimes people make a reservation at a restaurant and hope they can find people to join them.
I&rsquo;m not that gutsy and I usually prefer to gather people until I have a headcount and then call a nearby restaurant to ask if a reservation is needed.
During your first conference I&rsquo;m recommend <strong>walking up to a group of folks and asking &ldquo;does anyone have dinner plans?&rdquo;</strong>
Often the response will be &ldquo;we&rsquo;re trying to figure that out now, want to join us?&rdquo;</p>

<p>As far as events in the evening besides dinner go, there&rsquo;s a variety of options usually.
Some people go out drinking.
I don&rsquo;t drink, so I don&rsquo;t do this but I&rsquo;ve also heard the recommendation from drinkers that <strong>it&rsquo;s a very bad idea to drink heavily during a conference</strong>.
You&rsquo;re with people you don&rsquo;t know in a new community: don&rsquo;t increase the chance that you might alienate someone by doing something you regret.
I&rsquo;m very biased here, but I&rsquo;d drinking very moderately if you drink at all during PyCon.</p>

<p>One thing you&rsquo;ll likely see a lot of during PyCon is board games.
Folks often play board games in the hotel lobbies, in board game bars, and even in the open spaces!
PyCon&rsquo;s open spaces usually involve some evening time for after hour events and board games are frequently one of those events.
There&rsquo;s usually <strong>at least one night with a semi-official board game open spaces</strong> event, but there are often others that appear.
You could even put your own board game open space event on the board!</p>

<p>I can&rsquo;t mention board games without mentioning my absolute favorite conference ice breaker: <strong>the cabo card game</strong>.
I&rsquo;ve played Cabo at <a href="https://twitter.com/treyhunner/status/573027732902133760">most</a> <a href="https://twitter.com/treyhunner/status/587086868396822528">tech</a> <a href="https://twitter.com/algosuna/status/641421944005378048">conferences</a> <a href="https://twitter.com/treyhunner/status/746454264495513601">I&rsquo;ve</a> <a href="https://twitter.com/treyhunner/status/755887571264212993">been</a> <a href="https://twitter.com/treyhunner/status/897971022334382080">to</a>.
I love Cabo because it only requires a 52 card deck and using the phrase &ldquo;want to learn a 20 minute card game that I guarantee you&rsquo;ve never heard of&rdquo; seems to allow people to let their guard down and meet new people (not everyone says yes, but many people do).
If you&rsquo;d like to try playing Cabo yourself, you can read my blog post on <a href="http://treyhunner.com/2015/06/cabo-card-game/">the rules to the Cabo card game</a>.</p>

<p>The thing I love about nearly all forms of games is that your technical interests or expertise don&rsquo;t usually matter when you&rsquo;re playing a game.
You can bond with people without have any deep conversation at all.
I&rsquo;ve met people the day after playing a long game and <strong>felt like I already knew them even though I didn&rsquo;t even know their name yet</strong>.</p>

<h3>Volunteering 💝</h3>

<p>If you&rsquo;re the type of person who derives comfort from understanding and being part of the inner workings of a community event, I recommend <a href="https://us.pycon.org/2018/about/volunteers/">volunteering to help out while at PyCon</a>.</p>

<p>You might think it&rsquo;s premature to volunteer during your first PyCon and for some roles, it likely is.
You probably shouldn&rsquo;t volunteer to be a session chair during your first PyCon for example because that&rsquo;s a big role.
But you could absolutely be part of the <a href="https://us.pycon.org/2018/about/volunteers/#swag">swag bag stuffing</a>, which is a way to see lots friendly of faces while being a smiling cog in a bag-stuff assembly line.</p>

<p>You could also volunteer to help <a href="https://us.pycon.org/2018/about/volunteers/#swag_dist">hand out swag bags</a>, act as a friendly <a href="https://us.pycon.org/2018/about/volunteers/#tutorials">greeter for folks coming into tutorials</a>, or <a href="https://us.pycon.org/2018/about/volunteers/#registration">help out at the registration desk</a>.
These might sound like scary tasks, but from my experience <strong>the folks who coordinate volunteers are happy to answer questions and prepare you for your role</strong> so that you feel comfortable doing the job you&rsquo;ve signed up for.
All three of those tasks are ways to practice being a cheerful and empathetic face, which will help other first-time attendees to feel comfortable too.</p>

<p>After volunteering, people may occasionally meet you in the hall and wonder why they&rsquo;re already familiar with your friendly face.
It&rsquo;s because you handed them their badge or checked their name off a list!
Also volunteering can give you glimpse behind the scenes of PyCon and <strong>make things feel a little less scary and official</strong>.</p>

<p>If you are planning to volunteer though, make sure you block that time off on your calendar and that you show up.
<strong>Don&rsquo;t miss your volunteering time slots and leave the staff scrambling to find someone to fill in at the last minute</strong>.</p>

<p>If volunteering to be a small part of the event inner-workings isn&rsquo;t your thing, don&rsquo;t worry.
<strong>There are lots of great ways to spend your time while at PyCon</strong>!</p>

<h3>Give a lightning talk ⚡</h3>

<p>If you&rsquo;re feeling particularly bold one day, you could sign up on the <a href="https://us.pycon.org/2018/events/lightning/talks/">lightning talk board</a> to give a 5 minute lightning talk on a topic of your choosing.
This is another excuse for people to talk to you.</p>

<p>I gave my first conference lightning talk <a href="https://us.pycon.org/2018/about/volunteers/#registration">at DjangoCon 2015</a>, during which I compared modern JavaScript to Python.
A few people I&rsquo;d never met started a conversation with me at a bar afterward by saying &ldquo;I liked your lightning talk.&rdquo;
Lightning talks can act as an ice breaker.
If you give a talk to a giant room of people, you&rsquo;ve given everyone in that room at least a reason to talk to you.</p>

<p>If you do give a lightning talk, <strong>make sure it&rsquo;s less than 5 minutes</strong>.
You do not want to run over time in a lightning talk.
The shorter and more compact, the better.</p>

<h3>Take care of yourself 💗</h3>

<p>There&rsquo;s so many people.
What do I do if I get overwhelmed?</p>

<p>While at PyCon, you&rsquo;ll want to <strong>make sure you pace yourself</strong> and that you <strong>find a way to slow down and recharge</strong> when needed.
If you&rsquo;re an introvert, your laptop&rsquo;s batteries will likely last longer than yours before needing a recharge at PyCon.
At least once a day, I&rsquo;d recommend finding a quiet place to sit, breathe deeply, think about your day, and meditate.</p>

<p>Don&rsquo;t expect yourself to be able to wake up, head to the conference venue, do things at every moment during the day, and then go out with folks for dinner and more conversation in the evening.
If you know your limits, respect them.
<strong>Push yourself outside of your comfort zone, but don&rsquo;t stretch your boundaries too far</strong>.
Make sure to check in with yourself and take breaks to assess whether you need mid-day a nap or a bit of quiet alone time between lunch and dinner.
<strong>You cannot be &ldquo;on&rdquo; at every moment</strong>.</p>

<h3>Tips from others 😄</h3>

<p>I can&rsquo;t write a guide on attending PyCon without referencing a couple other wonderful guides that have been written on this topic.</p>

<p>Danny Greenfeld&rsquo;s <a href="https://www.pydanny.com/beginners-guide-pycon-2014.html">Beginner&rsquo;s Guide to PyCon 2015</a> is another great guide to PyCon, with lots of tips on how to make the most of PyCon.
It&rsquo;s much more compact than my post here, so it&rsquo;s a quick and dense read.</p>

<p>Al Sweigart also talks quite a bit about his strategies for meeting new people at PyCon in his <a href="https://automatetheboringstuff.com/how-to-do-pycon.html">How to Do PyCon</a> post.
Al is also an introvert, but he&rsquo;s very good at gamifying socializing with others.</p>

<p>I also <strong>highly recommend asking questions</strong> to staff members, friendly-looking volunteers, and people with silly hats (some people use hats to indicate that they&rsquo;re approachable).
Different PyCon attendees will have different recommendations for how to make the most of PyCon without getting overwhelmed.</p>

<p>Also, if you see me in the hallway at PyCon (I have a face that looks like me and will like have a &ldquo;Trey Hunner&rdquo; name badge on), say hi and let me know you read this article! 😄</p>

<p>I hope you have a lovely PyCon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyword (Named) Arguments in Python: How to Use Them]]></title>
    <link href="http://treyhunner.com/2018/04/keyword-arguments-in-python/"/>
    <updated>2018-04-04T08:00:00-07:00</updated>
    <id>http://treyhunner.com/2018/04/keyword-arguments-in-python</id>
    <content type="html"><![CDATA[<p>Keyword arguments are one of those Python features that often seems a little odd for folks moving to Python from many other programming languages.  It doesn&rsquo;t help that folks learning Python often discover the various features of keyword arguments slowly over time.</p>

<p>When teaching Python, I&rsquo;ve often wished I had a summary of the various keyword argument-related features that I could link learners to.  I hope that this article will accomplish that task.</p>

<p>In this article I&rsquo;m going to explain what keyword arguments are and why they&rsquo;re used.  I&rsquo;ll then go over some more advanced uses of them that even long-time Python programmers may have overlooked because quite a few things have changed in recent versions of Python 3.  If you&rsquo;re already an experienced Python programmer, you might want to skip to the end.</p>

<h2>What are keyword arguments?</h2>

<p>Let&rsquo;s take a look at what keyword arguments (also called &ldquo;named arguments&rdquo;) are.</p>

<p>First let&rsquo;s take this Python function:</p>

<pre><code class="python">from math import sqrt

def quadratic(a, b, c):
    x1 = -b / (2*a)
    x2 = sqrt(b**2 - 4*a*c) / (2*a)
    return (x1 + x2), (x1 - x2)
</code></pre>

<p>When we call this function, we can pass each of our three arguments in two different ways.</p>

<p>We can pass our arguments as positional arguments like this:</p>

<pre><code class="pycon">&gt;&gt;&gt; quadratic(31, 93, 62)
(-1.0, -2.0)
</code></pre>

<p>Or we can pass our arguments as keyword arguments like this:</p>

<pre><code class="pycon">&gt;&gt;&gt; quadratic(a=31, b=93, c=62)
(-1.0, -2.0)
</code></pre>

<p>The order of these arguments matters when they&rsquo;re passed positionally:</p>

<pre><code class="pycon">&gt;&gt;&gt; quadratic(31, 93, 62)
(-1.0, -2.0)
&gt;&gt;&gt; quadratic(62, 93, 31)
(-0.5, -1.0)
</code></pre>

<p>But it doesn&rsquo;t matter when they&rsquo;re passed by their name:</p>

<pre><code class="pycon">&gt;&gt;&gt; quadratic(a=31, b=93, c=62)
(-1.0, -2.0)
&gt;&gt;&gt; quadratic(c=62, b=93, a=31)
(-1.0, -2.0)
</code></pre>

<p>When we use keyword/named arguments, it&rsquo;s the name that matters, not the position:</p>

<pre><code class="pycon">&gt;&gt;&gt; quadratic(a=31, b=93, c=62)
(-1.0, -2.0)
&gt;&gt;&gt; quadratic(c=31, b=93, a=62)
(-0.5, -1.0)
</code></pre>

<p>So unlike many other programming languages, Python knows the names of the arguments our function accepts.</p>

<p>If we ask for help on our function Python will tell us our three arguments by name:</p>

<pre><code class="pycon">&gt;&gt;&gt; help(quadratic)
Help on function quadratic in module __main__:

quadratic(a, b, c)
</code></pre>

<p>Note that functions can be called with a mix of positional and named arguments:</p>

<pre><code class="pycon">&gt;&gt;&gt; quadratic(31, 93, c=62)
(-1.0, -2.0)
</code></pre>

<p>That can come in handy, but with the particular function we&rsquo;ve written here it&rsquo;s most clear to use all positional arguments or all keyword arguments.</p>

<h2>Why use keyword arguments?</h2>

<p>When calling functions in Python, you&rsquo;ll often have to choose between using keyword arguments or positional arguments.  Keyword arguments can often be used to make function calls more explicit.</p>

<p>Take this code:</p>

<pre><code class="python">def write_gzip_file(output_file, contents):
    with GzipFile(None, 'wt', 9, output_file) as gzip_out:
        gzip_out.write(contents)
</code></pre>

<p>This takes a file object <code>output_file</code> and <code>contents</code> string and writes a gzipped version of the string to the output file.</p>

<p>This code does the same thing but it uses keyword arguments instead of positional arguments:</p>

<pre><code class="python">def write_gzip_file(output_file, contents):
    with GzipFile(fileobj=output_file, mode='wt', compresslevel=9) as gzip_out:
        gzip_out.write(contents)
</code></pre>

<p>Notice that using this keyword argument call style made it more obvious what each of these three arguments represent.</p>

<p>We were also able to leave off an argument here.  The first argument that we left off represents a <code>filename</code> and already has a default value of <code>None</code>.  We don&rsquo;t need a <code>filename</code> here because we&rsquo;re supposed to pass either a file object or a filename to <code>GzipFile</code>, not both.</p>

<p>We&rsquo;re actually able to leave another argument off though.</p>

<p>Here&rsquo;s the same code again, but the compress level has been left at its default value of <code>9</code> this time:</p>

<pre><code class="python">def write_gzip_file(output_file, contents):
    with GzipFile(fileobj=output_file, mode='wt') as gzip_out:
        gzip_out.write(contents)
</code></pre>

<p>Because we used named arguments, we were able to leave out two arguments and rearrange the remaining 2 arguments in a sensible order (the file object is more important than the &ldquo;wt&rdquo; access mode).</p>

<p>When we use keyword arguments:</p>

<ol>
<li>We can often leave out arguments that have default values</li>
<li>We can rearrange arguments in a way that makes them most readable</li>
<li>We call arguments by their names to make it more clear what they represent</li>
</ol>


<h2>Where you see keyword arguments</h2>

<p>You&rsquo;ll likely see keyword arguments quite a bit in Python.</p>

<p>Python has a number of functions that take an unlimited number of positional arguments.  These functions sometimes have arguments that can be provided to customize their functionality.  Those arguments must be provided as named arguments to distinguish them from the unlimited positional arguments.</p>

<p>The built-in <code>print</code> function accepts the optional <code>sep</code>, <code>end</code>, <code>file</code>, and <code>flush</code> attributes as keyword-only arguments:</p>

<pre><code class="pycon">&gt;&gt;&gt; print('comma', 'separated', 'words', sep=', ')
comma, separated, words
</code></pre>

<p>The <code>itertools.zip_longest</code> function also accepts an optional <code>fillvalue</code> attribute (which defaults to <code>None</code>) exclusively as a keyword argument:</p>

<pre><code class="pycon">&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; list(zip_longest([1, 2], [7, 8, 9], [4, 5], fillvalue=0))
[(1, 7, 4), (2, 8, 5), (0, 9, 0)]
</code></pre>

<p>In fact, some functions in Python force arguments to be named even when they <em>could</em> have been unambiguously specified positionally.</p>

<p>In Python 2, the <code>sorted</code> function accepted all its arguments as either positional or keyword arguments:</p>

<pre><code class="pycon">&gt;&gt;&gt; sorted([4, 1, 8, 2, 7], None, None, True)
[8, 7, 4, 2, 1]
&gt;&gt;&gt; sorted([4, 1, 8, 2, 7], reverse=True)
[8, 7, 4, 2, 1]
</code></pre>

<p>But Python 3&rsquo;s <code>sorted</code> function requires all arguments after the provided iterable to be specified as keyword arguments:</p>

<pre><code class="pycon">&gt;&gt;&gt; sorted([4, 1, 8, 2, 7], None, True)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must use keyword argument for key function
&gt;&gt;&gt; sorted([4, 1, 8, 2, 7], reverse=True)
[8, 7, 4, 2, 1]
</code></pre>

<p>Keyword arguments come up quite a bit in Python&rsquo;s built-in functions as well as in the standard library and third party libraries.</p>

<h2>Requiring your arguments be named</h2>

<p>You can create a function that accepts any number of positional arguments as well as some keyword-only arguments by using the <code>*</code> operator to capture all the positional arguments and then specify optional keyword-only arguments after the <code>*</code> capture.</p>

<p>Here&rsquo;s an example:</p>

<pre><code class="python">def product(*numbers, initial=1):
    total = initial
    for n in numbers:
        total *= n
    return total
</code></pre>

<p><strong>Note</strong>: If you haven&rsquo;t seen that <code>*</code> syntax before, <code>*numbers</code> captures all positional arguments given to the <code>product</code> function into a tuple which the <code>numbers</code> variable points to.</p>

<p>The <code>initial</code> argument in the above function must be specified as a keyword argument:</p>

<pre><code class="pycon">&gt;&gt;&gt; product(4, 4)
16
&gt;&gt;&gt; product(4, 4, initial=1)
16
&gt;&gt;&gt; product(4, 5, 2, initial=3)
120
</code></pre>

<p>Note that while <code>initial</code> has a default value, you can also specify <em>required</em> keyword-only arguments using this syntax:</p>

<pre><code class="python">def join(*iterables, joiner):
    if not iterables:
        return
    yield from iterables[0]
    for iterable in iterables[1:]:
        yield joiner
        yield from iterable
</code></pre>

<p>That <code>joiner</code> variable doesn&rsquo;t have a default value, so it must be specified:</p>

<pre><code class="pycon">&gt;&gt;&gt; list(join([1, 2, 3], [4, 5], [6, 7], joiner=0))
[1, 2, 3, 0, 4, 5, 0, 6, 7]
&gt;&gt;&gt; list(join([1, 2, 3], [4, 5], [6, 7], joiner='-'))
[1, 2, 3, '-', 4, 5, '-', 6, 7]
&gt;&gt;&gt; list(join([1, 2, 3], [4, 5], [6, 7]))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: join() missing 1 required keyword-only argument: 'joiner'
</code></pre>

<p>Note that this syntax of putting arguments after the <code>*</code> only works in Python 3.  There&rsquo;s no syntactic way in Python 2 to require an argument to be named.</p>

<h2>Keyword-only arguments without positional arguments</h2>

<p>What if you want to accept keyword-only arguments without also accepting unlimited positional arguments?</p>

<p>If you want to accept keyword-only arguments and you&rsquo;re not using a <code>*</code> to accept any number of positional arguments, you can use a <code>*</code> without anything after it.</p>

<p>For example here&rsquo;s a modified version of Django&rsquo;s <code>django.shortcuts.render</code> function:</p>

<pre><code class="python">def render(request, template_name, context=None, *, content_type=None, status=None, using=None):
    content = loader.render_to_string(template_name, context, request, using=using)
    return HttpResponse(content, content_type, status)
</code></pre>

<p>Unlike Django&rsquo;s current implementation of <code>render</code>, this version disallows calling <code>render</code> by specifying every argument positionally.  The <code>context_type</code>, <code>status</code>, and <code>using</code> arguments must be specified by their <code>name</code>.</p>

<pre><code class="pycon">&gt;&gt;&gt; render(request, '500.html', {'error': error}, status=500)
&lt;HttpResponse status_code=500, "text/html; charset=utf-8"&gt;
&gt;&gt;&gt; render(request, '500.html', {'error': error}, 500)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: render() takes from 2 to 3 positional arguments but 4 were given
</code></pre>

<p>Just like with unlimited positional arguments, these keyword arguments can be required.  Here&rsquo;s a function with four required keyword-only arguments:</p>

<pre><code class="python">from random import choice, shuffle
UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWERCASE = UPPERCASE.lower()
DIGITS = "0123456789"
ALL = UPPERCASE + LOWERCASE + DIGITS

def random_password(*, upper, lower, digits, length):
    chars = [
        *(choice(UPPERCASE) for _ in range(upper)),
        *(choice(LOWERCASE) for _ in range(lower)),
        *(choice(DIGITS) for _ in range(digits)),
        *(choice(ALL) for _ in range(length-upper-lower-digits)),
    ]
    shuffle(chars)
    return "".join(chars)
</code></pre>

<p>This function requires all of its arguments to be specified using their name:</p>

<pre><code class="pycon">&gt;&gt;&gt; random_password(upper=1, lower=1, digits=1, length=8)
'oNA7rYWI'
&gt;&gt;&gt; random_password(upper=1, lower=1, digits=1, length=8)
'bjonpuM6'
&gt;&gt;&gt; random_password(1, 1, 1, 8)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: random_password() takes 0 positional arguments but 4 were given
</code></pre>

<p>Requiring arguments to be named can make calls to our function much clearer.</p>

<p>The purpose of this function call:</p>

<pre><code class="pycon">&gt;&gt;&gt; password = random_password(upper=1, lower=1, digits=1, length=8)
</code></pre>

<p>Is much more obvious than this one:</p>

<pre><code class="pycon">&gt;&gt;&gt; password = random_password(1, 1, 1, 8)
</code></pre>

<p>Again note that this syntax also only works in Python 3.</p>

<h2>Capturing arbitrary keyword arguments</h2>

<p>What if you want to write a function that captures an arbitrary number of keyword arguments?</p>

<p>For example the string format method accepts any keyword argument you give it:</p>

<pre><code class="pycon">&gt;&gt;&gt; "My name is {name} and I like {color}".format(name="Trey", color="purple")
'My name is Trey and I like purple'
</code></pre>

<p>How can you write such a function?</p>

<p>Python allows functions to capture any keyword arguments provided to them using the <code>**</code> operator when defining the function:</p>

<pre><code class="python">def format_attributes(**attributes):
    """Return a string of comma-separated key-value pairs."""
    return ", ".join(
        f"{param}: {value}"
        for param, value in attributes.items()
    )
</code></pre>

<p>That <code>**</code> operator will allow our <code>format_attributes</code> function to accept any number of keyword arguments.  The given arguments will be stored in a dictionary called <code>attributes</code>.</p>

<p>Here&rsquo;s an example use of our function:</p>

<pre><code class="pycon">&gt;&gt;&gt; format_attributes(name="Trey", website="http://treyhunner.com", color="purple")
'name: Trey, website: http://treyhunner.com, color: purple'
</code></pre>

<h2>Calling functions with arbitrary arguments</h2>

<p>Just as you can define functions that take arbitrary keyword arguments, you can also call functions with arbitrary keyword arguments.</p>

<p>By this I mean that you can pass keyword arguments into a function based on items in a dictionary.</p>

<p>Here we&rsquo;re manually taking every key/value pair from a dictionary and passing them in as keyword arguments:</p>

<pre><code class="pycon">&gt;&gt;&gt; items = {'name': "Trey", 'website': "http://treyhunner.com", 'color': "purple"}
&gt;&gt;&gt; format_attributes(name=items['name'], website=items['website'], color=items['color'])
'name: Trey, website: http://treyhunner.com, color: purple'
</code></pre>

<p>This approach of hard-coding the keyword arguments in our function call requires that we know every key in the dictionary we&rsquo;re using at the time our code is written.  This won&rsquo;t work if we have a dictionary with unknown keys.</p>

<p>We can pass arbitrary keyword arguments to our function using the <code>**</code> operator to unpack our dictionary items into keyword arguments in our function call:</p>

<pre><code class="pycon">&gt;&gt;&gt; items = {'name': "Trey", 'website': "http://treyhunner.com", 'color': "purple"}
&gt;&gt;&gt; format_attributes(**items)
'name: Trey, website: http://treyhunner.com, color: purple'
</code></pre>

<p>This ability to pass arbitrary keyword arguments into functions and to accept arbitrary keyword arguments inside functions (as we did before) is seen frequently when using inheritance:</p>

<pre><code class="python">def my_method(self, *args, **kwargs):
    print('Do something interesting here')
    super().my_method(*args, **kwargs)  # Call parent method with all given arguments
</code></pre>

<p><strong>Note</strong>: We&rsquo;re also using the <code>*</code> operator here for the same kind of capturing and unpacking of positional arguments.</p>

<h2>Order matters</h2>

<p>Since Python 3.6, functions always preserve the order of the keyword arguments passed to them (see <a href="https://www.python.org/dev/peps/pep-0468/">PEP 468</a>).  This means that when <code>**</code> is used to capture keyword arguments, the resulting dictionary will have keys in the same order the arguments were passed.</p>

<p>So since Python 3.6, you&rsquo;ll <em>never</em> see something like this happen:</p>

<pre><code class="pycon">&gt;&gt;&gt; format_attributes(name="Trey", website="http://treyhunner.com", color="purple")
'website: http://treyhunner.com, color: purple, name: Trey'
</code></pre>

<p>Instead, with Python 3.6+, arguments will always maintain the order they were passed in:</p>

<pre><code class="pycon">&gt;&gt;&gt; format_attributes(name="Trey", website="http://treyhunner.com", color="purple")
'name: Trey, website: http://treyhunner.com, color: purple'
</code></pre>

<h2>Embrace keyword arguments in Python</h2>

<p>An arguments <em>position</em> often doesn&rsquo;t convey as much meaning as its <em>name</em>.  So when calling functions, consider naming arguments that you pass in if it might make their meaning clearer.</p>

<p>When defining a new function, stop to think about which arguments should always be specified as keyword arguments when calling your function.  Consider using the <code>*</code> operator to require those arguments be specified as keyword arguments.</p>

<p>And remember that you can accept arbitrary keyword arguments to the functions you define and pass arbitrary keyword arguments to the functions you call by using the <code>**</code> operator.</p>

<p>Important objects deserve names and you can use keyword arguments to give your objects the names they deserve!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple assignment and tuple unpacking improve Python code readability]]></title>
    <link href="http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/"/>
    <updated>2018-03-07T16:30:00-08:00</updated>
    <id>http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability</id>
    <content type="html"><![CDATA[<p>Whether I&rsquo;m teaching new Pythonistas or long-time Python programmers, I frequently find that <strong>Python programmers underutilize multiple assignment</strong>.</p>

<p>Multiple assignment (also known as tuple unpacking or iterable unpacking) allows you to assign multiple variables at the same time in one line of code.
This feature often seems simple after you&rsquo;ve learned about it, but <strong>it can be tricky to recall multiple assignment when you need it most</strong>.</p>

<p>In this article we&rsquo;ll see what multiple assignment is, we&rsquo;ll take a look at common uses of multiple assignment, and then we&rsquo;ll look at a few uses for multiple assignment that are often overlooked.</p>

<p>Note that in this article I will be using <a href="https://cito.github.io/blog/f-strings/">f-strings</a> which are a Python 3.6+ feature.
If you&rsquo;re on an older version of Python, you&rsquo;ll need to mentally translate those to use the string <code>format</code> method.</p>

<h2>How multiple assignment works</h2>

<p>I&rsquo;ll be using the words <strong>multiple assignment</strong>, <strong>tuple unpacking</strong>, and <strong>iterable unpacking</strong> interchangeably in this article.
They&rsquo;re all just different words for the same thing.</p>

<p>Python&rsquo;s multiple assignment looks like this:</p>

<pre><code class="pycon">&gt;&gt;&gt; x, y = 10, 20
</code></pre>

<p>Here we&rsquo;re setting <code>x</code> to <code>10</code> and <code>y</code> to <code>20</code>.</p>

<p>What&rsquo;s happening at a lower level is that we&rsquo;re creating a tuple of <code>10, 20</code> and then looping over that tuple and taking each of the two items we get from looping and assigning them to <code>x</code> and <code>y</code> in order.</p>

<p>This syntax might make that a bit more clear:</p>

<pre><code class="pycon">&gt;&gt;&gt; (x, y) = (10, 20)
</code></pre>

<p>Parenthesis are optional around tuples in Python and they&rsquo;re also optional in multiple assignment (which uses a tuple-like syntax).
All of these are equivalent:</p>

<pre><code class="pycon">&gt;&gt;&gt; x, y = 10, 20
&gt;&gt;&gt; x, y = (10, 20)
&gt;&gt;&gt; (x, y) = 10, 20
&gt;&gt;&gt; (x, y) = (10, 20)
</code></pre>

<p>Multiple assignment is often called &ldquo;tuple unpacking&rdquo; because it&rsquo;s frequently used with tuples.
But we can use multiple assignment with any iterable, not just tuples.
Here we&rsquo;re using it with a list:</p>

<pre><code class="pycon">&gt;&gt;&gt; x, y = [10, 20]
&gt;&gt;&gt; x
10
&gt;&gt;&gt; y
20
</code></pre>

<p>And with a string:</p>

<pre><code class="pycon">&gt;&gt;&gt; x, y = 'hi'
&gt;&gt;&gt; x
'h'
&gt;&gt;&gt; y
'i'
</code></pre>

<p>Anything that can be looped over can be &ldquo;unpacked&rdquo; with tuple unpacking / multiple assignment.</p>

<p>Here&rsquo;s another example to demonstrate that multiple assignment works with any number of items and that it works with variables as well as objects we&rsquo;ve just created:</p>

<pre><code class="pycon">&gt;&gt;&gt; point = 10, 20, 30
&gt;&gt;&gt; x, y, z = point
&gt;&gt;&gt; print(x, y, z)
10 20 30
&gt;&gt;&gt; (x, y, z) = (z, y, x)
&gt;&gt;&gt; print(x, y, z)
30 20 10
</code></pre>

<p>Note that on that last line we&rsquo;re actually swapping variable names, which is something multiple assignment allows us to do easily.</p>

<p>Alright, let&rsquo;s talk about how multiple assignment can be used.</p>

<h2>Unpacking in a for loop</h2>

<p>You&rsquo;ll commonly see multiple assignment used in <code>for</code> loops.</p>

<p>Let&rsquo;s take a dictionary:</p>

<pre><code class="pycon">&gt;&gt;&gt; person_dictionary = {'name': "Trey", 'company': "Truthful Technology LLC"}
</code></pre>

<p>Instead of looping over our dictionary like this:</p>

<pre><code class="python">for item in person_dictionary.items():
    print(f"Key {item[0]} has value {item[1]}")
</code></pre>

<p>You&rsquo;ll often see Python programmers use multiple assignment by writing this:</p>

<pre><code class="python">for key, value in person_dictionary.items():
    print(f"Key {key} has value {value}")
</code></pre>

<p>When you write the <code>for X in Y</code> line of a for loop, you&rsquo;re telling Python that it should do an assignment to <code>X</code> for each iteration of your loop.
Just like in an assignment using the <code>=</code> operator, we can use multiple assignment here.</p>

<p>This:</p>

<pre><code class="python">for key, value in person_dictionary.items():
    print(f"Key {key} has value {value}")
</code></pre>

<p>Is essentially the same as this:</p>

<pre><code class="python">for item in person_dictionary.items():
    key, value = item
    print(f"Key {key} has value {value}")
</code></pre>

<p>We&rsquo;re just not doing an unnecessary extra assignment in the first example.</p>

<p>So multiple assignment is great for unpacking dictionary items into key-value pairs, but it&rsquo;s helpful in many other places too.</p>

<p>It&rsquo;s great when paired with the built-in <code>enumerate</code> function:</p>

<pre><code class="python">for i, line in enumerate(my_file):
    print(f"Line {i}: {line}")
</code></pre>

<p>And the <code>zip</code> function:</p>

<pre><code class="python">for color, ratio in zip(colors, ratios):
    print(f"It's {ratio*100}% {color}.")
</code></pre>

<pre><code class="python">for (product, price, color) in zip(products, prices, colors):
    print(f"{product} is {color} and costs ${price:.2f}")
</code></pre>

<p>If you&rsquo;re unfamiliar with <code>enumerate</code> or <code>zip</code>, see my article on <a href="http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/">looping with indexes in Python</a>.</p>

<p>Newer Pythonistas often see multiple assignment in the context of <code>for</code> loops and sometimes assume it&rsquo;s tied to loops.  Multiple assignment works for any assignment though, not just loop assignments.</p>

<h2>An alternative to hard coded indexes</h2>

<p>It&rsquo;s not uncommon to see hard coded indexes (e.g. <code>point[0]</code>, <code>items[1]</code>, <code>vals[-1]</code>) in code:</p>

<pre><code class="python">print(f"The first item is {items[0]} and the last item is {items[-1]}")
</code></pre>

<p>When you see Python code that uses hard coded indexes there&rsquo;s often a way to <strong>use multiple assignment to make your code more readable</strong>.</p>

<p>Here&rsquo;s some code that has three hard coded indexes:</p>

<pre><code class="python">def reformat_date(mdy_date_string):
    """Reformat MM/DD/YYYY string into YYYY-MM-DD string."""
    date = mdy_date_string.split('/')
    return f"{date[2]}-{date[0]}-{date[1]}"
</code></pre>

<p>We can make this code much more readable by using multiple assignment to assign separate month, day, and year variables:</p>

<pre><code class="python">def reformat_date(mdy_date_string):
    """Reformat MM/DD/YYYY string into YYYY-MM-DD string."""
    month, day, year = mdy_date_string.split('/')
    return f"{year}-{month}-{day}"
</code></pre>

<p>Whenever you see hard coded indexes in your code, stop to consider whether you could use multiple assignment to make your code more readable.</p>

<h2>Multiple assignment is very strict</h2>

<p>Multiple assignment is actually fairly strict when it comes to unpacking the iterable we give to it.</p>

<p>If we try to unpack a larger iterable into a smaller number of variables, we&rsquo;ll get an error:</p>

<pre><code class="pycon">&gt;&gt;&gt; x, y = (10, 20, 30)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack (expected 2)
</code></pre>

<p>If we try to unpack a smaller iterable into a larger number of variables, we&rsquo;ll also get an error:</p>

<pre><code class="pycon">&gt;&gt;&gt; x, y, z = (10, 20)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: not enough values to unpack (expected 3, got 2)
</code></pre>

<p>This strictness is pretty great.
If we&rsquo;re working with an item that has a different size than we expected, the multiple assignment will fail loudly and we&rsquo;ll hopefully now know about a bug in our program that we weren&rsquo;t yet aware of.</p>

<p>Let&rsquo;s look at an example.
Imagine that we have a short command line program that parses command-line arguments in a rudimentary way, like this:</p>

<pre><code class="python">import sys

new_file = sys.argv[1]
old_file = sys.argv[2]
print(f"Copying {new_file} to {old_file}")
</code></pre>

<p>Our program is supposed to accept 2 arguments, like this:</p>

<pre><code class="bash">$ my_program.py file1.txt file2.txt
Copying file1.txt to file2.txt
</code></pre>

<p>But if someone called our program with three arguments, they will not see an error:</p>

<pre><code class="bash">$ my_program.py file1.txt file2.txt file3.txt
Copying file1.txt to file2.txt
</code></pre>

<p>There&rsquo;s no error because we&rsquo;re not validating that we&rsquo;ve received exactly 2 arguments.</p>

<p>If we use multiple assignment instead of hard coded indexes, the assignment will verify that we receive exactly the expected number of arguments:</p>

<pre><code class="python">import sys

_, new_file, old_file = sys.argv
print(f"Copying {new_file} to {old_file}")
</code></pre>

<p><strong>Note</strong>: we&rsquo;re using the variable name <code>_</code> to note that we don&rsquo;t care about <code>sys.argv[0]</code> (the name of our program).
Using <code>_</code> for variables you don&rsquo;t care about is just a convention.</p>

<h2>An alternative to slicing</h2>

<p>So multiple assignment can be used for avoiding hard coded indexes and it can be used to ensure we&rsquo;re strict about the size of the tuples/iterables we&rsquo;re working with.</p>

<p>Multiple assignment can be used to replace hard coded slices too!</p>

<p>Slicing is a handy way to grab a specific portion of the items in lists and other sequences.</p>

<p>Here are some slices that are &ldquo;hard coded&rdquo; in that they only use numeric indexes:</p>

<pre><code class="python">all_after_first = items[1:]
all_but_last_two = items[:-2]
items_with_ends_removed = items[1:-1]
</code></pre>

<p>Whenever you see slices that don&rsquo;t use any variables in their slice indexes, you can often use multiple assignment instead.
To do this we have to talk about a feature that I haven&rsquo;t mentioned yet: the <code>*</code> operator.</p>

<p>In Python 3.0, the <code>*</code> operator was added to the multiple assignment syntax, allowing us to capture remaining items after an unpacking into a list:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; first, *rest = numbers
&gt;&gt;&gt; rest
[2, 3, 4, 5, 6]
&gt;&gt;&gt; first
1
</code></pre>

<p>The <code>*</code> operator allows us to replace hard coded slices near the ends of sequences.</p>

<p>These two lines are equivalent:</p>

<pre><code class="pycon">&gt;&gt;&gt; beginning, last = numbers[:-1], numbers[-1]
&gt;&gt;&gt; *beginning, last = numbers
</code></pre>

<p>These two lines are equivalent also:</p>

<pre><code class="pycon">&gt;&gt;&gt; head, middle, tail = numbers[0], numbers[1:-1], numbers[-1]
&gt;&gt;&gt; head, *middle, tail = numbers
</code></pre>

<p>With the <code>*</code> operator and multiple assignment you can replace things like this:</p>

<pre><code class="python">main(sys.argv[0], sys.argv[1:])
</code></pre>

<p>With more descriptive code, like this:</p>

<pre><code class="python">program_name, *arguments = sys.argv
main(program_name, arguments)
</code></pre>

<p>So if you see hard coded slice indexes in your code, consider whether you could use multiple assignment to clarify what those slices really represent.</p>

<h2>Deep unpacking</h2>

<p>This next feature is something that long-time Python programmers often overlook.
It doesn&rsquo;t come up quite as often as the other uses for multiple assignment that I&rsquo;ve discussed, but it can be very handy to know about when you do need it.</p>

<p>We&rsquo;ve seen multiple assignment for unpacking tuples and other iterables.
We haven&rsquo;t yet seen that this is can be done <em>deeply</em>.</p>

<p>I&rsquo;d say that the following multiple assignment is <em>shallow</em> because it unpacks one level deep:</p>

<pre><code class="pycon">&gt;&gt;&gt; color, point = ("red", (1, 2, 3))
&gt;&gt;&gt; color
'red'
&gt;&gt;&gt; point
(1, 2, 3)
</code></pre>

<p>And I&rsquo;d say that this multiple assignment is <em>deep</em> because it unpacks the previous <code>point</code> tuple further into <code>x</code>, <code>y</code>, and <code>z</code> variables:</p>

<pre><code class="pycon">&gt;&gt;&gt; color, (x, y, z) = ("red", (1, 2, 3))
&gt;&gt;&gt; color
'red'
&gt;&gt;&gt; x
1
&gt;&gt;&gt; y
2
</code></pre>

<p>If it seems confusing what&rsquo;s going on above, maybe using parenthesis consistently on both sides of this assignment will help clarify things:</p>

<pre><code class="pycon">&gt;&gt;&gt; (color, (x, y, z)) = ("red", (1, 2, 3))
</code></pre>

<p>We&rsquo;re unpacking one level deep to get two objects, but then we take the second object and unpack it also to get 3 more objects.
Then we assign our first object and our thrice-unpacked second object to our new variables (<code>color</code>, <code>x</code>, <code>y</code>, and <code>z</code>).</p>

<p>Take these two lists:</p>

<pre><code class="python">start_points = [(1, 2), (3, 4), (5, 6)]
end_points = [(-1, -2), (-3, 4), (-6, -5)]
</code></pre>

<p>Here&rsquo;s an example of code that works with these lists by using shallow unpacking:</p>

<pre><code class="python">for start, end in zip(start_points, end_points):
    if start[0] == -end[0] and start[1] == -end[1]:
        print(f"Point {start[0]},{start[1]} was negated.")
</code></pre>

<p>And here&rsquo;s the same thing with deeper unpacking:</p>

<pre><code class="python">for (x1, y1), (x2, y2) in zip(start_points, end_points):
    if x1 == -x2 and y1 == -y2:
        print(f"Point {x1},{y1} was negated.")
</code></pre>

<p>Note that in this second case, it&rsquo;s much more clear what type of objects we&rsquo;re working with.
The deep unpacking makes it apparent that we&rsquo;re receiving two 2-itemed tuples each time we loop.</p>

<p>Deep unpacking often comes up when nesting looping utilities that each provide multiple items.
For example, you may see deep multiple assignments when using <code>enumerate</code> and <code>zip</code> together:</p>

<pre><code class="python">items = [1, 2, 3, 4, 2, 1]
for i, (first, last) in enumerate(zip(items, reversed(items))):
    if first != last:
        raise ValueError(f"Item {i} doesn't match: {first} != {last}")
</code></pre>

<p>I said before that multiple assignment is strict about the size of our iterables as we unpack them.
With deep unpacking we can also be <strong>strict about the shape of our iterables</strong>.</p>

<p>This works:</p>

<pre><code class="pycon">&gt;&gt;&gt; points = ((1, 2), (-1, -2))
&gt;&gt;&gt; points[0][0] == -points[1][0] and points[0][1] == -point[1][1]
True
</code></pre>

<p>But this buggy code works too:</p>

<pre><code class="pycon">&gt;&gt;&gt; points = ((1, 2, 4), (-1, -2, 3), (6, 4, 5))
&gt;&gt;&gt; points[0][0] == -points[1][0] and points[0][1] == -point[1][1]
True
</code></pre>

<p>Whereas this works:</p>

<pre><code class="pycon">&gt;&gt;&gt; points = ((1, 2), (-1, -2))
&gt;&gt;&gt; (x1, y1), (x2, y2) = points
&gt;&gt;&gt; x1 == -x2 and y1 == -y2
True
</code></pre>

<p>But this does not:</p>

<pre><code class="pycon">&gt;&gt;&gt; points = ((1, 2, 4), (-1, -2, 3), (6, 4, 5))
&gt;&gt;&gt; (x1, y1), (x2, y2) = points
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack (expected 2)
</code></pre>

<p>With multiple assignment we&rsquo;re assigning variables while also making particular assertions about the size and shape of our iterables.
Multiple assignment will help you clarify your code to both humans (for <strong>better code readability</strong>) and to computers (for <strong>improved code correctness</strong>).</p>

<h2>Using a list-like syntax</h2>

<p>I noted before that multiple assignment uses a tuple-like syntax, but it works on any iterable.
That tuple-like syntax is the reason it&rsquo;s commonly called &ldquo;tuple unpacking&rdquo; even though it might be more clear to say &ldquo;iterable unpacking&rdquo;.</p>

<p>I didn&rsquo;t mention before that multiple assignment also works with <strong>a list-like syntax</strong>.</p>

<p>Here&rsquo;s a multiple assignment with a list-like syntax:</p>

<pre><code class="pycon">&gt;&gt;&gt; [x, y, z] = 1, 2, 3
&gt;&gt;&gt; x
1
</code></pre>

<p>This might seem really strange. What&rsquo;s the point of allowing both list-like and tuple-like syntaxes?</p>

<p>I use this feature rarely, but I find it helpful for <strong>code clarity</strong> in specific circumstances.</p>

<p>Let&rsquo;s say I have code that used to look like this:</p>

<pre><code class="python">def most_common(items):
    return Counter(items).most_common(1)[0][0]
</code></pre>

<p>And our well-intentioned coworker has decided to use deep multiple assignment to refactor our code to this:</p>

<pre><code class="python">def most_common(items):
    (value, times_seen), = Counter(items).most_common(1)
    return value
</code></pre>

<p>See that trailing comma on the left-hand side of the assignment?
It&rsquo;s easy to miss and it makes this code look sort of weird.
What is that comma even doing in this code?</p>

<p>That trailing comma is there to make a single item tuple.
We&rsquo;re doing deep unpacking here.</p>

<p>Here&rsquo;s another way we could write the same code:</p>

<pre><code class="python">def most_common(items):
    ((value, times_seen),) = Counter(items).most_common(1)
    return value
</code></pre>

<p>This might make that deep unpacking a little more obvious but I&rsquo;d prefer to see this instead:</p>

<pre><code class="python">def most_common(items):
    [(value, times_seen)] = Counter(items).most_common(1)
    return value
</code></pre>

<p>The list-syntax in our assignment makes it more clear that we&rsquo;re unpacking a one-item iterable and then unpacking that single item into <code>value</code> and <code>times_seen</code> variables.</p>

<p>When I see this, I also think <em>I bet we&rsquo;re unpacking a single-item list</em>.
And that is in fact what we&rsquo;re doing.
We&rsquo;re using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter">Counter</a> object from the collections module here.
The <code>most_common</code> method on <code>Counter</code> objects allows us to limit the length of the list returned to us.
We&rsquo;re limiting the list we&rsquo;re getting back to just a single item.</p>

<p>When you&rsquo;re unpacking structures that often hold lots of values (like lists) and structures that often hold a very specific number of values (like tuples) you may decide that your code appears more <em>semantically accurate</em> if you use a list-like syntax when unpacking those list-like structures.</p>

<p>If you&rsquo;d like you might even decide to adopt a convention of always using a list-like syntax when unpacking list-like structures (frequently the case when using <code>*</code> in multiple assignment):</p>

<pre><code class="pycon">&gt;&gt;&gt; [first, *rest] = numbers
</code></pre>

<p>I don&rsquo;t usually use this convention myself, mostly because I&rsquo;m just not in the habit of using it.
But if you find it helpful, you might consider using this convention in your own code.</p>

<p>When using multiple assignment in your code, consider when and where a list-like syntax might make your code more descriptive and more clear.
This can sometimes improve readability.</p>

<h2>Don&rsquo;t forget about multiple assignment</h2>

<p>Multiple assignment can improve both the readability of your code and the correctness of your code.
It can make your code <strong>more descriptive</strong> while also making implicit assertions about the <strong>size and shape</strong> of the iterables you&rsquo;re unpacking.</p>

<p>The use for multiple assignment that I often see forgotten is its ability to <strong>replace hard coded indexes</strong>, including <strong>replacing hard coded slices</strong> (using the <code>*</code> syntax).
It&rsquo;s also common to overlook the fact that multiple assignment works <em>deeply</em> and can be used with both a <em>tuple-like</em> syntax and a <em>list-like</em> syntax.</p>

<p>It&rsquo;s tricky to recognize and remember all the cases that multiple assignment can come in handy.
Please feel free to use this article as your personal reference guide to multiple assignment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: range is not an iterator!]]></title>
    <link href="http://treyhunner.com/2018/02/python-range-is-not-an-iterator/"/>
    <updated>2018-02-28T16:00:00-08:00</updated>
    <id>http://treyhunner.com/2018/02/python-range-is-not-an-iterator</id>
    <content type="html"><![CDATA[<p>After my <a href="https://www.youtube.com/watch?v=Wd7vcuiMhxU">Loop Better talk at PyGotham 2017</a> someone asked me a great question: iterators are lazy iterables and <code>range</code> is a lazy iterable in Python 3, so is <code>range</code> an iterator?</p>

<p>Unfortunately, I don&rsquo;t remember the name of the person who asked me this question.  I do remember saying something along the lines of &ldquo;oh I love that question!&rdquo;</p>

<p>I love this question because <code>range</code> objects in Python 3 (<a href="treyhunner.com/2018/02/python-3-s-range-better-than-python-2-s-xrange/">xrange in Python 2</a>) are lazy, but <strong>range objects are not iterators</strong> and this is something I see folks mix up frequently.</p>

<p>In the last year I&rsquo;ve heard Python beginners, long-time Python programmers, and even other Python trainers mistakenly refer to Python 3&rsquo;s <code>range</code> objects as iterators.  This distinction is something a lot of people get confused about.</p>

<h2>Yes this <em>is</em> confusing</h2>

<p>When people talk about iterators and iterables in Python, you&rsquo;re likely to hear the someone repeat the misconception that <code>range</code> is an iterator.  This mistake might seem unimportant at first, but I think it&rsquo;s actually a pretty critical one.  If you believe that <code>range</code> objects are iterators, your mental model of how iterators work in Python <em>isn&rsquo;t clear enough yet</em>.  Both <code>range</code> and iterators are &ldquo;lazy&rdquo; in a sense, but they&rsquo;re lazy in fairly different ways.</p>

<p>With this article I&rsquo;m going to explain how iterators work, how <code>range</code> works, and how the laziness of these two types of &ldquo;lazy iterables&rdquo; differs.</p>

<p>But first, I&rsquo;d like to ask that you <strong>do not use the information below as an excuse to be unkind to anyone</strong>, whether new learners or experienced Python programmers.  Many people have used Python very happily for years without fully understanding the distinction I&rsquo;m about to explain.  You can write many thousands of lines of Python code without having a strong mental model of how iterators work.</p>

<h2>What&rsquo;s an iterator?</h2>

<p>In Python an iterable is anything that you can iterate over and an iterator is the thing that does the actual iterating.</p>

<p>Iter-<strong>ables</strong> are able to be iterated over.  Iter-<strong>ators</strong> are the agents that perform the iteration.</p>

<p>You can get an iterator from any iterable in Python by using the <code>iter</code> function:</p>

<pre><code class="python">&gt;&gt;&gt; iter([1, 2])
&lt;list_iterator object at 0x7f043a081da0&gt;
&gt;&gt;&gt; iter('hello')
&lt;str_iterator object at 0x7f043a081dd8&gt;
</code></pre>

<p>Once you have an iterator, the only thing you can do with it is get its next item:</p>

<pre><code class="python">&gt;&gt;&gt; my_iterator = iter([1, 2])
&gt;&gt;&gt; next(my_iterator)
1
&gt;&gt;&gt; next(my_iterator)
2
</code></pre>

<p>And you&rsquo;ll get a stop iteration exception if you ask for the next item but there aren&rsquo;t anymore items:</p>

<pre><code class="python">&gt;&gt;&gt; next(my_iterator)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p>Both conveniently and somewhat confusingly, all iterators are also iterables.  Meaning you can get an iterator from an iterator (it&rsquo;ll give you itself back).  Therefore you can iterate over an iterator as well:</p>

<pre><code class="python">&gt;&gt;&gt; my_iterator = iter([1, 2])
&gt;&gt;&gt; [x**2 for x in my_iterator]
[1, 4]
</code></pre>

<p>Importantly, it should be noted that iterators are stateful.  Meaning once you&rsquo;ve consumed an item from an iterator, it&rsquo;s gone.  So after you&rsquo;ve looped over an iterator once, it&rsquo;ll be empty if you try to loop over it again:</p>

<pre><code class="python">&gt;&gt;&gt; my_iterator = iter([1, 2])
&gt;&gt;&gt; [x**2 for x in my_iterator]
[1, 4]
&gt;&gt;&gt; [x**2 for x in my_iterator]
[]
</code></pre>

<p>In Python 3, <code>enumerate</code>, <code>zip</code>, <code>reversed</code>, and a number of other built-in functions return iterators:</p>

<pre><code class="python">&gt;&gt;&gt; enumerate(numbers)
&lt;enumerate object at 0x7f04384ff678&gt;
&gt;&gt;&gt; zip(numbers, numbers)
&lt;zip object at 0x7f043a085cc8&gt;
&gt;&gt;&gt; reversed(numbers)
&lt;list_reverseiterator object at 0x7f043a081f28&gt;
</code></pre>

<p>Generators (whether from generator functions or generator expressions) are one of the simpler ways to create your own iterators:</p>

<pre><code class="python">&gt;&gt;&gt; numbers = [1, 2, 3, 4, 5]
&gt;&gt;&gt; squares = (n**2 for n in numbers)
&gt;&gt;&gt; squares
&lt;generator object &lt;genexpr&gt; at 0x7f043a0832b0&gt;
</code></pre>

<p>I often say that iterators are lazy single-use iterables.  They&rsquo;re &ldquo;lazy&rdquo; because they have the ability to only compute items as you loop over them.  And they&rsquo;re &ldquo;single-use&rdquo; because once you&rsquo;ve &ldquo;consumed&rdquo; an item from an iterator, it&rsquo;s gone forever.  The term &ldquo;exhausted&rdquo; is often used for an iterator that has been fully consumed.</p>

<p>That was the quick summary of what iterators are.  If you haven&rsquo;t encountered iterators before, I&rsquo;d recommend reviewing them a bit further before continuing on.  I&rsquo;ve written <a href="http://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">an article which explains iterators</a> and I&rsquo;ve given a talk, <a href="https://www.youtube.com/watch?v=Wd7vcuiMhxU">Loop Better</a> which I mentioned earlier, during which I dive a bit deeper into iterators.</p>

<h2>How is range different?</h2>

<p>Okay we&rsquo;ve reviewed iterators.  Let&rsquo;s talk about <code>range</code> now.</p>

<p>The <code>range</code> object in Python 3 (<code>xrange</code> in Python 2) can be looped over like any other iterable:</p>

<pre><code class="python">&gt;&gt;&gt; for n in range(3):
...     print(n)
...
0
1
2
</code></pre>

<p>And because <code>range</code> is an iterable, we can get an iterator from it:</p>

<pre><code class="python">&gt;&gt;&gt; iter(range(3))
&lt;range_iterator object at 0x7f043a0a7f90&gt;
</code></pre>

<p>But <code>range</code> objects themselves are not iterators.  We <strong>cannot</strong> call <code>next</code> on a <code>range</code> object:</p>

<pre><code class="python">&gt;&gt;&gt; next(range(3))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'range' object is not an iterator
</code></pre>

<p>And unlike an iterator, we can loop over a <code>range</code> object without consuming it:</p>

<pre><code class="python">&gt;&gt;&gt; numbers = range(3)
&gt;&gt;&gt; tuple(numbers)
(0, 1, 2)
&gt;&gt;&gt; tuple(numbers)
(0, 1, 2)
</code></pre>

<p>If we did this with an iterator, we&rsquo;d get no elements the second time we looped:</p>

<pre><code class="python">&gt;&gt;&gt; numbers = iter(range(3))
&gt;&gt;&gt; tuple(numbers)
(0, 1, 2)
&gt;&gt;&gt; tuple(numbers)
()
</code></pre>

<p>Unlike <code>zip</code>, <code>enumerate</code>, or <code>generator</code> objects, <code>range</code> objects <strong>are not iterators</strong>.</p>

<h2>So what is range?</h2>

<p>The <code>range</code> object is &ldquo;lazy&rdquo; in a sense because it doesn&rsquo;t generate every number that it &ldquo;contains&rdquo; when we create it.  Instead it gives those numbers to us as we need them when looping over it.</p>

<p>Here is a <code>range</code> object and a generator (which is a type of iterator):</p>

<pre><code class="python">&gt;&gt;&gt; numbers = range(1_000_000)
&gt;&gt;&gt; squares = (n**2 for n in numbers)
</code></pre>

<p>Unlike iterators, <code>range</code> objects have a length:</p>

<pre><code class="python">&gt;&gt;&gt; len(numbers)
1000000
&gt;&gt;&gt; len(squares)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'generator' has no len()
</code></pre>

<p>And they can be indexed:</p>

<pre><code class="python">&gt;&gt;&gt; numbers[-2]
999998
&gt;&gt;&gt; squares[-2]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'generator' object is not subscriptable
</code></pre>

<p>And unlike iterators, you can ask them whether they contain things without changing their state:</p>

<pre><code class="python">&gt;&gt;&gt; 0 in numbers
True
&gt;&gt;&gt; 0 in numbers
True
&gt;&gt;&gt; 0 in squares
True
&gt;&gt;&gt; 0 in squares
False
</code></pre>

<p>If you&rsquo;re looking for a description for <code>range</code> objects, you could call them &ldquo;lazy sequences&rdquo;.  They&rsquo;re sequences (like lists, tuples, and strings) but they don&rsquo;t really contain any memory under the hood and instead answer questions computationally.</p>

<pre><code class="python">&gt;&gt;&gt; from collections.abc import Sequence
&gt;&gt;&gt; isinstance([1, 2], Sequence)
True
&gt;&gt;&gt; isinstance('hello', Sequence)
True
&gt;&gt;&gt; isinstance(range(3), Sequence)
True
</code></pre>

<h2>Why does this distinction matter?</h2>

<p>It might seem like I&rsquo;m nitpicking in saying that range isn&rsquo;t an iterator, but I really don&rsquo;t think I am.</p>

<p>If I tell you something is an iterator, you&rsquo;ll know that when you call <code>iter</code> on it you&rsquo;ll always get the same object back (by definition):</p>

<pre><code>&gt;&gt;&gt; iter(my_iterator) is my_iterator
True
</code></pre>

<p>And you&rsquo;ll be certain that you can call <code>next</code> on it because you can call <code>next</code> on all iterators:</p>

<pre><code>&gt;&gt;&gt; next(my_iterator)
4
&gt;&gt;&gt; next(my_iterator)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>

<p>And you&rsquo;ll know that items will be consumed from the iterator as you loop over it.  Sometimes this feature can come in handy for processing iterators in particular ways:</p>

<pre><code class="python">&gt;&gt;&gt; my_iterator = iter([1, 2, 3, 4])
&gt;&gt;&gt; list(zip(my_iterator, my_iterator))
[(1, 2), (3, 4)]
</code></pre>

<p>So while it may seem like the difference between &ldquo;lazy iterable&rdquo; and &ldquo;iterator&rdquo; is subtle, these terms really do mean different things.  While &ldquo;lazy iterable&rdquo; is a very general term without concrete meaning, the word &ldquo;iterator&rdquo; implies an object with a very specific set of behaviors.</p>

<h2>When in doubt say &ldquo;iterable&rdquo; or &ldquo;lazy iterable&rdquo;</h2>

<p>If you know you can loop over something, it&rsquo;s an <strong>iterable</strong>.</p>

<p>If you know the thing you&rsquo;re looping over happens to compute things as you loop over it, it&rsquo;s a <strong>lazy iterable</strong>.</p>

<p>If you know you can pass something to the <code>next</code> function, it&rsquo;s an <strong>iterator</strong> (which are the most common form of lazy iterables).</p>

<p>If you can loop over something multiple times without &ldquo;exhausting&rdquo; it, it&rsquo;s not an iterator.  If you can&rsquo;t pass something to the <code>next</code> function, it&rsquo;s not an iterator.  Python 3&rsquo;s <code>range</code> object is not an iterator.  If you&rsquo;re teaching people about <code>range</code> objects, please don&rsquo;t use the word &ldquo;iterator&rdquo;.  It&rsquo;s confusing and might cause others to start misusing the word &ldquo;iterator&rdquo; as well.</p>

<p>On the other hand, if you see someone else misusing the word iterator don&rsquo;t be mean.  You may want to point out the misuse if it seems important, but keep in mind that I&rsquo;ve heard long-time Python programmers and experienced Python trainers misuse this word by calling <code>range</code> objects iterators.  Words are important, but language is tricky.</p>

<p>Thanks for joining me on this brief <code>range</code> and iterator-filled adventure!</p>
]]></content>
  </entry>
  
</feed>
